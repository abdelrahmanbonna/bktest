// Mocks generated by Mockito 5.3.1 from annotations
// in bktest/test/Feature/Persons/Domain/Repositories/test_persons_repository.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:bktest/Core/Errors/failure.dart' as _i5;
import 'package:bktest/Core/UseCases/use_case.dart' as _i7;
import 'package:bktest/Features/Persons/Domain/Entities/person.dart' as _i6;
import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

import 'test_persons_repository.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TestPersonsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTestPersonsRepository extends _i1.Mock
    implements _i3.TestPersonsRepository {
  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.Person>>> getAllPersons(
          _i7.NoParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllPersons,
          [params],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, List<_i6.Person>>>.value(
                _FakeEither_0<_i5.Failure, List<_i6.Person>>(
          this,
          Invocation.method(
            #getAllPersons,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, List<_i6.Person>>>.value(
                _FakeEither_0<_i5.Failure, List<_i6.Person>>(
          this,
          Invocation.method(
            #getAllPersons,
            [params],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.Person>>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, bool>> addPersons(_i6.Person? person) =>
      (super.noSuchMethod(
        Invocation.method(
          #addPersons,
          [person],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, bool>>.value(
            _FakeEither_0<_i5.Failure, bool>(
          this,
          Invocation.method(
            #addPersons,
            [person],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, bool>>.value(
                _FakeEither_0<_i5.Failure, bool>(
          this,
          Invocation.method(
            #addPersons,
            [person],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, bool>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, bool>> deletePerson(_i6.Person? person) =>
      (super.noSuchMethod(
        Invocation.method(
          #deletePerson,
          [person],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, bool>>.value(
            _FakeEither_0<_i5.Failure, bool>(
          this,
          Invocation.method(
            #deletePerson,
            [person],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, bool>>.value(
                _FakeEither_0<_i5.Failure, bool>(
          this,
          Invocation.method(
            #deletePerson,
            [person],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, bool>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, bool>> editPerson(
          _i6.Person? editedPerson) =>
      (super.noSuchMethod(
        Invocation.method(
          #editPerson,
          [editedPerson],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, bool>>.value(
            _FakeEither_0<_i5.Failure, bool>(
          this,
          Invocation.method(
            #editPerson,
            [editedPerson],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, bool>>.value(
                _FakeEither_0<_i5.Failure, bool>(
          this,
          Invocation.method(
            #editPerson,
            [editedPerson],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, bool>>);
}
